# ==============================================================================
# DASHBOARD EDUCACIONAL INTERATIVO - ESP√çRITO SANTO 2023
# ==============================================================================
# Autor: Leonardo Cruz de Andrade
# Disciplina: Cloud Computing para produtos de dados
# Professor: Maxwell Monteiro
#
# Descri√ß√£o:
# Este dashboard interativo analisa a rela√ß√£o entre a infraestrutura escolar
# e o desempenho educacional (IDEB 2023) dos munic√≠pios do Esp√≠rito Santo.
# Os dados s√£o carregados do Google BigQuery e visualizados de forma
# interativa usando Streamlit, Plotly e PyDeck.
#
# Vers√£o Aprimorada:
# Esta vers√£o mant√©m 100% da funcionalidade original, com foco em uma
# estiliza√ß√£o visual refinada para uma apar√™ncia mais moderna e profissional.
# ==============================================================================


# --- 1. IMPORTA√á√ÉO DE BIBLIOTECAS ---
# Bibliotecas essenciais para o funcionamento do dashboard.
# ------------------------------------------------------------------------------
import streamlit as st
from google.oauth2 import service_account
from google.cloud import bigquery
import pandas as pd
import pydeck as pdk                      # Para a cria√ß√£o de mapas geoespaciais
from shapely import wkt                   # Para manipula√ß√£o de dados geom√©tricos (pol√≠gonos dos munic√≠pios)
import plotly.graph_objects as go
import plotly.express as px
import locale                             # Para ordena√ß√£o correta de strings com acentos (ex: nomes de munic√≠pios)


# --- 2. CONFIGURA√á√ïES INICIAIS DA APLICA√á√ÉO ---
# Define o layout da p√°gina, o locale para ordena√ß√£o e os estilos visuais.
# ------------------------------------------------------------------------------

# Configura√ß√£o da p√°gina do Streamlit (deve ser o primeiro comando st)
st.set_page_config(
    page_title="Dashboard Educacional ES",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Define o locale para portugu√™s do Brasil para garantir a ordena√ß√£o alfab√©tica correta
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252') # Fallback para sistemas Windows
    except locale.Error:
        st.sidebar.warning("Locale 'pt_BR' n√£o encontrado. A ordena√ß√£o pode n√£o ser perfeita.")

# Defini√ß√£o da paleta de cores para consist√™ncia visual
COLOR_PRIMARY = "#004A8B" # Azul escuro para t√≠tulos principais
COLOR_SECONDARY = "#1F77B4" # Azul mais claro para subt√≠tulos e elementos de UI
COLOR_ACCENT = "#FF6F61" # Um tom de coral para destaque (ex: linhas de tend√™ncia)
COLOR_BACKGROUND = "#F0F2F6" # Cinza claro para o fundo principal
COLOR_CARD_BACKGROUND = "#FFFFFF" # Branco para os cart√µes
COLOR_TEXT = "#333333" # Cinza escuro para texto
COLOR_SUCCESS = "#28A745" # Verde para indicadores positivos
COLOR_DANGER = "#DC3545" # Vermelho para indicadores negativos
COLOR_NEUTRAL = "#FFC107" # Amarelo para indicadores m√©dios

# Estilos CSS customizados para uma apar√™ncia profissional e moderna.
st.markdown(f"""
<style>
    /* Importa√ß√£o da fonte e configura√ß√µes globais */
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');
    
    html, body, [class*="st-"], .stButton>button {{
        font-family: 'Roboto', sans-serif;
        color: {COLOR_TEXT};
    }}

    /* Fundo principal da aplica√ß√£o */
    .main {{
        background-color: {COLOR_BACKGROUND};
    }}

    /* Container principal com espa√ßamento otimizado */
    .block-container {{
        padding: 2rem 3rem 3rem 3rem;
    }}

    /* Estilo dos cards para cada visualiza√ß√£o */
    div[data-testid="stVerticalBlock"] > div[style*="flex-direction: column;"] > div[data-testid="stVerticalBlock"] {{
        background-color: {COLOR_CARD_BACKGROUND};
        border: 1px solid #E0E0E0;
        border-radius: 12px;
        padding: 28px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        transition: box-shadow 0.3s ease-in-out;
    }}
    div[data-testid="stVerticalBlock"] > div[style*="flex-direction: column;"] > div[data-testid="stVerticalBlock"]:hover {{
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    }}

    /* Barra lateral */
    [data-testid="stSidebar"] {{
        background-color: #FAFBFC;
        border-right: 1px solid #E0E0E0;
    }}
    [data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 {{
        color: {COLOR_PRIMARY};
    }}

    /* Tipografia e Hierarquia Visual */
    h1 {{
        font-size: 2.5rem;
        font-weight: 700;
        color: {COLOR_PRIMARY};
        padding-bottom: 0.5rem;
    }}
    h2 {{
        font-size: 1.75rem;
        font-weight: 700;
        color: {COLOR_SECONDARY};
        border-bottom: 3px solid {COLOR_SECONDARY};
        padding-bottom: 10px;
        margin-top: 2.5rem;
        margin-bottom: 1.5rem;
    }}
    h5 {{
        color: {COLOR_SECONDARY};
        font-weight: 500;
    }}

    /* Estilo das m√©tricas (KPIs) */
    .stMetric {{
        background-color: #F8F9FA;
        border: 1px solid #DEE2E6;
        border-left: 5px solid {COLOR_SECONDARY};
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
    }}
    .stMetric label {{
        font-weight: 500;
    }}
    .stMetric p {{
        font-size: 1.5rem;
        font-weight: 700;
    }}

    /* Cabe√ßalho de informa√ß√µes */
    .header-info {{
        font-size: 0.85rem;
        color: #555;
        text-align: right;
        line-height: 1.5;
        padding-top: 1.5rem;
    }}
    
    /* Linha divis√≥ria customizada */
    hr {{
        border: none;
        border-top: 1px solid #E0E0E0;
        margin: 2rem 0;
    }}

    /* --- SOLU√á√ÉO PARA CORRIGIR OS √çCONES DA BARRA LATERAL NO STREAMLIT --- */
    /* 1. Oculta o √≠cone de texto padr√£o que pode quebrar o layout */
    span[data-testid="stIconMaterial"] {{
        display: none !important;
    }}
    /* 2. Redesenha os √≠cones de seta usando SVG para controle total */
    button[data-testid="stSidebarCollapseButton"]::before, button[data-testid="stExpandSidebarButton"]::before {{
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: block;
        width: 24px;
        height: 24px;
    }}
    /* √çcone para RECOLHER (seta para a esquerda) */
    button[data-testid="stSidebarCollapseButton"]::before {{
        content: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3e%3cpath fill='%23555' d='M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z'/%3e%3c/svg%3e");
    }}
    /* √çcone para EXPANDIR (seta para a direita) */
    button[data-testid="stExpandSidebarButton"]::before {{
        content: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3e%3cpath fill='%23555' d='M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z'/%3e%3c/svg%3e");
    }}
    /* 3. For√ßa o posicionamento correto do bot√£o de expandir */
    button[data-testid="stExpandSidebarButton"] {{
        position: fixed;
        left: 10px;
        top: 10px;
        z-index: 100000;
        background-color: rgba(240, 242, 246, 0.8);
        border-radius: 50%;
        width: 48px;
        height: 48px;
        transition: background-color 0.2s;
    }}
    button[data-testid="stExpandSidebarButton"]:hover {{
        background-color: rgba(230, 230, 230, 1);
    }}

    /* --- Centraliza√ß√£o da legenda do mapa --- */
    div[data-testid="stVerticalBlock"]:has(div.legend-container) {{
        display: flex;
        align-items: center;
        justify-content: center;
    }}
    .legend-container {{
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }}

    /* Media queries para responsividade */
    @media (max-width: 992px) {{
        .block-container {{ padding: 1.5rem; }}
        .header-info {{ text-align: center; margin-top: 1rem; padding-top: 0; }}
    }}
</style>
""", unsafe_allow_html=True)


# --- 3. CONSTANTES E CONFIGURA√á√ïES DO BIGQUERY ---
# Centraliza as configura√ß√µes do projeto para facilitar a manuten√ß√£o.
# ------------------------------------------------------------------------------
DATASET_ID = "dados_educacionais_es"
IDEB_TABLE = "ideb_2023"
CENSO_TABLE = "censo_2023"
MAP_TABLE = "limites_municipais_es"


# --- 4. FUN√á√ïES DE ACESSO E PROCESSAMENTO DE DADOS ---
# Fun√ß√µes otimizadas com cache para conectar ao BigQuery e carregar os dados.
# ------------------------------------------------------------------------------

@st.cache_resource
def get_bq_client():
    """
    Cria e gerencia a conex√£o com o Google BigQuery usando as credenciais
    armazenadas no Streamlit Secrets.
    """
    try:
        credentials = service_account.Credentials.from_service_account_info(st.secrets["gcp_service_account"])
        project_id = credentials.project_id
        client = bigquery.Client(credentials=credentials, project=project_id)
        return client, project_id
    except Exception as e:
        st.error("Erro ao conectar com o BigQuery. Verifique suas credenciais no secrets.toml.")
        st.exception(e)
        st.stop()

@st.cache_data(ttl=3600)
def run_query(_client, query):
    """
    Executa uma consulta SQL no BigQuery e retorna o resultado como um DataFrame Pandas.
    """
    try:
        query_job = _client.query(query)
        return query_job.to_dataframe()
    except Exception as e:
        st.error(f"Erro ao executar a consulta no BigQuery.")
        st.exception(e)
        return pd.DataFrame()

@st.cache_data(ttl=3600)
def load_and_prepare_data(_client, project_id, dataset_id, ideb_table, censo_table):
    """
    Carrega, une as tabelas do IDEB e do Censo, e prepara os dados para visualiza√ß√£o.
    """
    query = f"""
        SELECT
            t1.*,
            t2.total_estimar_escolas, t2.escolas_com_internet, t2.escolas_com_lab_informatica,
            t2.escolas_com_biblioteca, t2.escolas_com_quadra_esportes, t2.escolas_com_banheiro_acessivel_pne,
            t2.pct_escolas_com_internet, t2.alunos_por_docente, t2.alunos_por_turma
        FROM `{project_id}.{dataset_id}.{ideb_table}` AS t1
        LEFT JOIN `{project_id}.{dataset_id}.{censo_table}` AS t2
        ON CAST(t1.cod_munic AS STRING) = CAST(t2.cod_munic AS STRING)
    """
    df = run_query(_client, query)

    numeric_cols = [
        'ideb_2023', 'nota_saeb_media_2023', 'tx_aprov_2023_1_ao_5_ano',
        'total_estimar_escolas', 'escolas_com_internet', 'escolas_com_lab_informatica',
        'escolas_com_biblioteca', 'escolas_com_quadra_esportes',
        'escolas_com_banheiro_acessivel_pne', 'pct_escolas_com_internet',
        'alunos_por_docente', 'alunos_por_turma'
    ]
    for col in numeric_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')

    friendly_names = {
        'nome_munic': 'Munic√≠pio', 'ideb_2023': 'Nota IDEB 2023',
        'nota_saeb_media_2023': 'Nota M√©dia SAEEB 2023', 'tx_aprov_2023_1_ao_5_ano': 'Taxa de Aprova√ß√£o (1¬∫-5¬∫ ano)',
        'total_estimar_escolas': 'Total de Escolas', 'escolas_com_internet': 'N¬∫ Escolas c/ Internet',
        'escolas_com_lab_informatica': 'N¬∫ Escolas c/ Lab. de Inform√°tica', 'escolas_com_biblioteca': 'N¬∫ Escolas c/ Biblioteca',
        'escolas_com_quadra_esportes': 'N¬∫ Escolas c/ Quadra', 'escolas_com_banheiro_acessivel_pne': 'N¬∫ Escolas c/ Acessibilidade',
        'pct_escolas_com_internet': '% Escolas com Internet', 'alunos_por_docente': 'M√©dia de Alunos por Docente',
        'alunos_por_turma': 'M√©dia de Alunos por Turma'
    }
    df = df.rename(columns=friendly_names)
    return df, friendly_names


# --- 5. INICIALIZA√á√ÉO DA APLICA√á√ÉO ---
# ------------------------------------------------------------------------------
client, PROJECT_ID = get_bq_client()
df_completo, friendly_names = load_and_prepare_data(client, PROJECT_ID, DATASET_ID, IDEB_TABLE, CENSO_TABLE)


# --- 6. INTERFACE DO USU√ÅRIO (UI) - CABE√áALHO E BARRA LATERAL ---
# ------------------------------------------------------------------------------
with st.container():
    col1, col2 = st.columns([2, 1])
    with col1:
        st.title("Dashboard Educacional Interativo")
        st.markdown("##### An√°lise da Rela√ß√£o entre Infraestrutura Escolar e Desempenho no IDEB 2023 no Esp√≠rito Santo")
    with col2:
        st.markdown(f"<div class='header-info'><b>P√≥s-Gradua√ß√£o em Minera√ß√£o de Dados Educacionais</b><br>Disciplina: Cloud Computing para produtos de dados<br>Professor: Maxwell Monteiro<br>Aluno: Leonardo Cruz de Andrade</div>", unsafe_allow_html=True)
st.markdown("<hr>", unsafe_allow_html=True)

st.sidebar.title("üéì Painel de Controle")
st.sidebar.markdown("---")
st.sidebar.header("‚öôÔ∏è Filtros e Navega√ß√£o")

if not df_completo.empty:
    lista_municipios = sorted(df_completo['Munic√≠pio'].unique(), key=locale.strxfrm)
    municipios_selecionados = st.sidebar.multiselect(
        "Selecione um ou mais munic√≠pios:",
        options=lista_municipios,
        default=[],
        placeholder="Todos os munic√≠pios"
    )
else:
    municipios_selecionados = []
    st.sidebar.warning("N√£o foi poss√≠vel carregar a lista de munic√≠pios.")

df_filtrado = df_completo[df_completo['Munic√≠pio'].isin(municipios_selecionados)] if municipios_selecionados else df_completo

secao = st.sidebar.radio(
    'Selecione a An√°lise:',
    ['P√°gina Inicial', 'Vis√£o Geral', 'An√°lise de Infraestrutura', 'An√°lise de Correla√ß√£o', 'An√°lise Comparativa', 'Dados Detalhados'],
    horizontal=False
)


# --- 7. RENDERIZA√á√ÉO DAS SE√á√ïES (P√ÅGINAS) ---
# ------------------------------------------------------------------------------

if secao == 'P√°gina Inicial':
    st.header("üìñ Vis√£o Geral do Projeto e das Bases de Dados")
    st.markdown("O objetivo deste projeto √© analisar a rela√ß√£o da infraestrutura escolar com o desempenho educacional no ano de 2023 das escolas p√∫blicas municipais do Estado do Esp√≠rito Santo, com foco nos anos iniciais (Ensino Fundamental I), para extrair insights sobre oportunidades de melhorias nas pol√≠ticas p√∫blicas. Abaixo, apresentamos as estat√≠sticas descritivas das duas principais bases de dados utilizadas.")

    st.subheader("Estat√≠sticas Descritivas do Censo Escolar 2023")
    query_censo_describe = f"SELECT * FROM `{PROJECT_ID}.{DATASET_ID}.{CENSO_TABLE}`"
    df_censo_full = run_query(client, query_censo_describe)
    if not df_censo_full.empty:
        df_numeric = df_censo_full.select_dtypes(include='number').drop(columns=['cod_munic'], errors='ignore')
        st.dataframe(df_numeric.rename(columns=friendly_names).describe().style.format("{:.2f}").set_properties(**{'background-color': '#f8f9fa', 'color': COLOR_TEXT}))
    else:
        st.warning("N√£o foi poss√≠vel carregar os dados para a tabela descritiva do Censo.")

    st.markdown("---")

    st.subheader("Estat√≠sticas Descritivas do IDEB 2023")
    query_ideb_describe = f"SELECT * FROM `{PROJECT_ID}.{DATASET_ID}.{IDEB_TABLE}`"
    df_ideb_full = run_query(client, query_ideb_describe)
    if not df_ideb_full.empty:
        df_numeric_ideb = df_ideb_full.select_dtypes(include='number').drop(columns=['cod_munic'], errors='ignore')
        st.dataframe(df_numeric_ideb.rename(columns=friendly_names).describe().style.format("{:.2f}").set_properties(**{'background-color': '#f8f9fa', 'color': COLOR_TEXT}))
    else:
        st.warning("N√£o foi poss√≠vel carregar os dados para a tabela descritiva do IDEB.")

elif secao == 'Vis√£o Geral':
    st.header("üó∫Ô∏è Desempenho Geral do IDEB 2023 no Estado")

    map_col, legend_col = st.columns([4, 1])

    with map_col:
        query_mapa = f"""
            SELECT t1.NM_MUN AS municipio, t1.geometry, t2.ideb_2023 AS nota_ideb
            FROM `{PROJECT_ID}.{DATASET_ID}.{MAP_TABLE}` AS t1
            JOIN `{PROJECT_ID}.{DATASET_ID}.{IDEB_TABLE}` AS t2
            ON CAST(t1.cod_munic AS STRING) = CAST(t2.cod_munic AS STRING)
        """
        df_mapa = run_query(client, query_mapa)

        if not df_mapa.empty:
            df_mapa.dropna(subset=['geometry', 'nota_ideb'], inplace=True)
            df_mapa['geometry_obj'] = df_mapa['geometry'].apply(wkt.loads)
            df_mapa['polygons'] = df_mapa['geometry_obj'].apply(lambda geom: [list(coord) for coord in geom.exterior.coords])
            view_state = pdk.ViewState(latitude=-19.5, longitude=-40.5, zoom=6.5, bearing=0, pitch=0)

            def get_color(nota):
                if pd.isnull(nota): return [200, 200, 200, 100]
                if nota < 5.8: return [220, 53, 69, 160] # Vermelho (Danger)
                if nota < 6.5: return [255, 193, 7, 160] # Amarelo (Neutral)
                return [40, 167, 69, 160] # Verde (Success)

            df_mapa['cor'] = df_mapa['nota_ideb'].apply(get_color)
            map_data = df_mapa[['municipio', 'nota_ideb', 'polygons', 'cor']].copy()
            # Pr√©-formata a nota do IDEB como string para a tooltip
            map_data['nota_ideb_str'] = map_data['nota_ideb'].apply(lambda x: f"{x:.2f}")
            polygon_layer = pdk.Layer('PolygonLayer', data=map_data, get_polygon='polygons', filled=True, get_fill_color='cor', pickable=True, auto_highlight=True, highlight_color=[255, 111, 97, 180])
            # Usa a coluna pr√©-formatada na tooltip
            tooltip = {"html": "<b>Munic√≠pio:</b> {municipio} <br/> <b>IDEB:</b> {nota_ideb_str}", "style": {"backgroundColor": "#333", "color": "white", "borderRadius": "5px", "padding": "8px"}}
            
            r = pdk.Deck(layers=[polygon_layer], initial_view_state=view_state, tooltip=tooltip, map_style='mapbox://styles/mapbox/light-v9')
            st.pydeck_chart(r)
        else:
            st.warning("N√£o foi poss√≠vel carregar os dados do mapa.")

    with legend_col:
        st.html(f"""
        <div class="legend-container">
            <div style="text-align: center; background-color: {COLOR_CARD_BACKGROUND}; border-radius: 12px; padding: 20px; border: 1px solid #e0e0e0; width: 100%;">
                <h5 style="margin-bottom: 15px; color: {COLOR_TEXT};">Legenda - Nota IDEB</h5>
                <div style="text-align: left;">
                    <div style="display: flex; align-items: center; margin-bottom: 8px;">
                        <div style="width: 20px; height: 20px; background-color: {COLOR_SUCCESS}; margin-right: 10px; border-radius: 3px; flex-shrink: 0;"></div>
                        <span><b>Alto:</b> &ge; 6.5</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 8px;">
                        <div style="width: 20px; height: 20px; background-color: {COLOR_NEUTRAL}; margin-right: 10px; border-radius: 3px; flex-shrink: 0;"></div>
                        <span><b>M√©dio:</b> 5.8-6.4</span>
                    </div>
                    <div style="display: flex; align-items: center;">
                        <div style="width: 20px; height: 20px; background-color: {COLOR_DANGER}; margin-right: 10px; border-radius: 3px; flex-shrink: 0;"></div>
                        <span><b>Baixo:</b> &lt; 5.8</span>
                    </div>
                </div>
            </div>
        </div>
        """)

    st.markdown("<hr>", unsafe_allow_html=True)
    st.subheader("Ranking de Desempenho dos Munic√≠pios")
    rank_col1, rank_col2 = st.columns(2)
    
    chart_font = dict(family="Roboto, sans-serif", size=12, color=COLOR_TEXT)

    with rank_col1:
        st.markdown("##### üöÄ Top 5 Melhores Desempenhos")
        df_top5 = df_filtrado.nlargest(5, 'Nota IDEB 2023')
        fig_top5 = px.bar(df_top5.sort_values('Nota IDEB 2023', ascending=True), y='Munic√≠pio', x='Nota IDEB 2023', text_auto=True, orientation='h')
        fig_top5.update_traces(marker_color=COLOR_SUCCESS, texttemplate='%{x:.2f}', textposition="outside")
        fig_top5.update_layout(yaxis_title=None, xaxis_title="Nota IDEB", plot_bgcolor='rgba(0,0,0,0)', font=chart_font, uniformtext_minsize=8, uniformtext_mode='hide')
        st.plotly_chart(fig_top5, use_container_width=True)

    with rank_col2:
        st.markdown("##### üîª Top 5 Piores Desempenhos")
        df_bottom5 = df_filtrado.nsmallest(5, 'Nota IDEB 2023')
        fig_bottom5 = px.bar(df_bottom5.sort_values('Nota IDEB 2023', ascending=False), y='Munic√≠pio', x='Nota IDEB 2023', text_auto=True, orientation='h')
        fig_bottom5.update_traces(marker_color=COLOR_DANGER, texttemplate='%{x:.2f}', textposition="outside")
        fig_bottom5.update_layout(yaxis_title=None, xaxis_title="Nota IDEB", plot_bgcolor='rgba(0,0,0,0)', font=chart_font, uniformtext_minsize=8, uniformtext_mode='hide')
        st.plotly_chart(fig_bottom5, use_container_width=True)

elif secao == 'An√°lise de Infraestrutura':
    st.header("üìä An√°lise de Infraestrutura (Censo 2023)")
    st.markdown("M√©dia e distribui√ß√£o dos indicadores para os munic√≠pios selecionados.")

    if not df_filtrado.empty:
        total_escolas = df_filtrado['Total de Escolas'].sum()
        avg_internet = df_filtrado['% Escolas com Internet'].mean()
        avg_lab = (df_filtrado['N¬∫ Escolas c/ Lab. de Inform√°tica'].sum() / total_escolas) * 100 if total_escolas > 0 else 0
        avg_quadra = (df_filtrado['N¬∫ Escolas c/ Quadra'].sum() / total_escolas) * 100 if total_escolas > 0 else 0
        avg_acessibilidade = (df_filtrado['N¬∫ Escolas c/ Acessibilidade'].sum() / total_escolas) * 100 if total_escolas > 0 else 0

        col1, col2, col3, col4 = st.columns(4)
        col1.metric(label="% Escolas com Internet", value=f"{avg_internet:.1f}%")
        col2.metric(label="% com Lab. Inform√°tica", value=f"{avg_lab:.1f}%")
        col3.metric(label="% com Quadra Esportiva", value=f"{avg_quadra:.1f}%")
        col4.metric(label="% com Acessibilidade", value=f"{avg_acessibilidade:.1f}%")
        st.markdown("<hr>", unsafe_allow_html=True)

        st.subheader("Distribui√ß√£o de Indicadores")
        col1, col2 = st.columns(2)
        chart_font = dict(family="Roboto, sans-serif", size=12, color=COLOR_TEXT)

        with col1:
            fig = px.histogram(df_filtrado, x="M√©dia de Alunos por Turma", nbins=20, title="Distribui√ß√£o de Alunos por Turma", color_discrete_sequence=[COLOR_SECONDARY])
            fig.update_yaxes(title_text='N√∫mero de Munic√≠pios')
            fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', bargap=0.1, font=chart_font)
            st.plotly_chart(fig, use_container_width=True)
        with col2:
            fig = px.histogram(df_filtrado, x="% Escolas com Internet", nbins=20, title="Distribui√ß√£o de % de Escolas com Internet", color_discrete_sequence=[COLOR_SECONDARY])
            fig.update_yaxes(title_text='N√∫mero de Munic√≠pios')
            fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', bargap=0.1, font=chart_font)
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("Nenhum dado dispon√≠vel para os munic√≠pios selecionados.")

elif secao == 'An√°lise de Correla√ß√£o':
    st.header("üîç An√°lise de Correla√ß√£o entre IDEB e Infraestrutura")
    chart_font = dict(family="Roboto, sans-serif", size=12, color=COLOR_TEXT)

    col1, col2 = st.columns([1, 2])
    with col1:
        st.subheader("Correla√ß√£o Interativa")
        st.write("Explore a rela√ß√£o entre o IDEB e um indicador de infraestrutura escolar.")
        opcoes_correlacao = {v: k for k, v in friendly_names.items() if k in ['pct_escolas_com_internet', 'alunos_por_turma', 'alunos_por_docente', 'tx_aprov_2023_1_ao_5_ano']}
        indicador_selecionado_friendly = st.selectbox("Selecione um indicador:", options=list(opcoes_correlacao.keys()))

    with col2:
        if not df_filtrado.empty and indicador_selecionado_friendly:
            df_chart = df_filtrado[[friendly_names['ideb_2023'], indicador_selecionado_friendly]].dropna()
            fig = px.scatter(df_chart, x=indicador_selecionado_friendly, y=friendly_names['ideb_2023'],
                             title=f"Rela√ß√£o entre {friendly_names['ideb_2023']} e {indicador_selecionado_friendly}",
                             trendline="ols", trendline_color_override=COLOR_ACCENT)
            fig.update_traces(marker=dict(color=COLOR_SECONDARY, size=8, opacity=0.7))
            fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', font=chart_font)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("Selecione um munic√≠pio para visualizar a correla√ß√£o.")

    st.markdown("<hr>", unsafe_allow_html=True)
    st.subheader("Mapa de Calor de Correla√ß√µes")
    if not df_filtrado.empty:
        df_corr = df_filtrado.select_dtypes(include='number').drop(columns=['cod_munic'], errors='ignore')
        corr = df_corr.rename(columns=friendly_names).corr()
        fig = go.Figure(data=go.Heatmap(z=corr.values, x=corr.columns, y=corr.columns, colorscale='RdBu_r', zmin=-1, zmax=1, colorbar=dict(thickness=15)))
        fig.update_layout(title_text="Matriz de Correla√ß√£o de Todas as Vari√°veis Num√©ricas", height=600, font=chart_font)
        st.plotly_chart(fig, use_container_width=True)

elif secao == 'An√°lise Comparativa':
    st.header("üÜö An√°lise Comparativa entre Munic√≠pios")
    st.write("Selecione dois ou mais munic√≠pios na barra lateral para compar√°-los lado a lado.")

    if len(municipios_selecionados) < 2:
        st.info("‚ÑπÔ∏è Por favor, selecione pelo menos dois munic√≠pios no filtro da barra lateral para ativar a compara√ß√£o.", icon="üí°")
    else:
        indicadores_comparacao_friendly = {
            'Nota IDEB 2023': 'Nota IDEB 2023',
            '% Escolas com Internet': '% Escolas com Internet',
            'M√©dia de Alunos por Turma': 'M√©dia de Alunos por Turma',
            'M√©dia de Alunos por Docente': 'M√©dia de Alunos por Docente'
        }
        indicador_comp_selecionado = st.selectbox("Selecione um indicador para comparar:", options=list(indicadores_comparacao_friendly.keys()))

        df_comp = df_filtrado[['Munic√≠pio', indicador_comp_selecionado]].dropna().sort_values(by=indicador_comp_selecionado, ascending=False)
        fig = px.bar(df_comp, x='Munic√≠pio', y=indicador_comp_selecionado,
                     title=f"Comparativo de '{indicador_comp_selecionado}'",
                     color='Munic√≠pio',
                     color_discrete_sequence=px.colors.qualitative.Pastel,
                     text_auto=True)
        fig.update_traces(textfont_size=14, textangle=0, textposition="outside", cliponaxis=False, texttemplate='%{y:.2f}')
        chart_font = dict(family="Roboto, sans-serif", size=12, color=COLOR_TEXT)
        fig.update_layout(plot_bgcolor='rgba(0,0,0,0)', uniformtext_minsize=8, uniformtext_mode='hide', showlegend=False, font=chart_font)
        st.plotly_chart(fig, use_container_width=True)

elif secao == 'Dados Detalhados':
    st.header("üìö Dados Detalhados por Munic√≠pio")
    st.write("Tabela com todos os indicadores para os munic√≠pios selecionados. Clique no cabe√ßalho de uma coluna para ordenar.")

    if not df_filtrado.empty:
        df_to_display = df_filtrado.drop(columns=['cod_munic'], errors='ignore').set_index('Munic√≠pio')
        numeric_cols_to_format = df_to_display.select_dtypes(include='number').columns
        st.dataframe(df_to_display.style.format("{:.2f}", subset=numeric_cols_to_format), use_container_width=True)
    else:
        st.info("‚ÑπÔ∏è Selecione um ou mais munic√≠pios no filtro da barra lateral para ver os dados detalhados.", icon="üí°")



